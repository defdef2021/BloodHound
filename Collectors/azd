   [CmdletBinding(PositionalBinding=$false)]
    param(
        [Alias("c")]
        [String[]]
        $CollectionMethod = [String[]] @('Default'),

        [Switch]
        $Stealth,

        [Alias("d")]
        [String]
        $Domain,

        [Switch]
        $WindowsOnly,

        [String]
        $ComputerFile,

        [ValidateScript({ Test-Path -Path $_ })]
        [String]
        $OutputDirectory = $(Get-Location),

        [ValidateNotNullOrEmpty()]
        [String]
        $OutputPrefix,

        [Switch]
        $PrettyJson,

        [String]
        $CacheFileName,

        [Switch]
        $RandomizeFilenames,

        [String]
        $ZipFilename,

        [Switch]
        $NoSaveCache,

        [Switch]
        $EncryptZip,

        [Switch]
        $InvalidateCache,

        [String]
        $SearchBase,

        [String]
        $LdapFilter,

        [string]
        $DomainController,

        [ValidateRange(0,65535)]
        [Int]
        $LdapPort,

        [Switch]
        $SecureLdap,

        [Switch]
        $DisableKerberosSigning,

        [String]
        $LdapUsername,

        [String]
        $LdapPassword,

        [Switch]
        $SkipPortScan,

        [ValidateRange(50,5000)]
        [Int]
        $PortScanTimeout = 2000,

        [Switch]
        $ExcludeDomainControllers,

        [ValidateRange(0,100)]
        [Int]
        $Jitter,

        [Int]
        $Throttle,

        [String]
        $OverrideUsername,

        [Switch]
        $NoRegistryLoggedOn,

        [Switch]
        $DumpComputerStatus,

        [String]
        $RealDNSName,

        [Switch]
        $CollectAllProperties,

        [ValidateRange(500,60000)]
        [Int]
        $StatusInterval,

        [Switch]
        $Loop,

        [String]
        $LoopDuration,

        [String]
        $LoopInterval,

        [Switch]
        $V,

        [Alias("h")]
        [Switch]
        $Help,

        [Switch]
        $Version
    )

    $vars = New-Object System.Collections.Generic.List[System.Object]

    if ($CollectionMethod){
        $vars.Add("--CollectionMethod");
        foreach ($cmethod in $CollectionMethod){
            $vars.Add($cmethod);
        }
    }

    if ($Domain){
        $vars.Add("--Domain");
        $vars.Add($Domain);
    }

    if ($Stealth){
        $vars.Add("--Stealth")
    }

    if ($WindowsOnly){
        $vars.Add("--WindowsOnly")
    }

    if ($ComputerFile){
        $vars.Add("--ComputerFile");
        $vars.Add($ComputerFile);
    }

    if ($OutputDirectory){
        $vars.Add("--OutputDirectory");
        $vars.Add($OutputDirectory);
    }

    if ($OutputPrefix){
        $vars.Add("--OutputPrefix");
        $vars.Add($OutputPrefix);
    }

    if ($PrettyJson){
        $vars.Add("--PrettyJson");
    }

    if ($CacheFileName){
        $vars.Add("--CacheFileName");
        $vars.Add($CacheFileName);
    }

     if ($RandomizeFilenames){
        $vars.Add("--RandomizeFilenames");
    }

    if ($ZipFileName){
        $vars.Add("--ZipFileName");
        $vars.Add($ZipFileName);
    }

    if ($NoSaveCache){
        $vars.Add("--NoSaveCache");
    }

    if ($EncryptZip){
        $vars.Add("--EncryptZip");
    }

    if ($NoZip){
        $vars.Add("--NoZip");
    }

    if ($InvalidateCache){
        $vars.Add("--InvalidateCache");
    }

    if ($LdapFilter){
        $vars.Add("--LdapFilter");
        $vars.Add($LdapFilter);
    }

    if ($DomainController){
        $vars.Add("--DomainController");
        $vars.Add($DomainController);
    }

    if ($LdapPort){
        $vars.Add("--LdapPort");
        $vars.Add($LdapPort);
    }

    if ($SecureLdap){
        $vars.Add("--SecureLdap");
    }

    if ($DisableKerberosSigning){
        $vars.Add("--DisableKerberosSigning");
    }

    if ($LdapUsername){
        $vars.Add("--LdapUsername");
        $vars.Add($LdapUsername);
    }

    if ($LdapPassword){
        $vars.Add("--LdapPassword");
        $vars.Add($LdapPassword);
    }

    if ($SearchBase){
        $vars.Add("--SearchBase")
        $vars.Add($SearchBase)
    }

    if ($SkipPortScan){
        $vars.Add("--SkipPortScan");
    }

    if ($PortScanTimeout){
        $vars.Add("--PortScanTimeout")
        $vars.Add($PortScanTimeout)
    }

    if ($ExcludeDomainControllers){
        $vars.Add("--ExcludeDomainControllers")
    }

    if ($Throttle){
        $vars.Add("--Throttle");
        $vars.Add($Throttle);
    }

    if ($Jitter -gt 0){
        $vars.Add("--Jitter");
        $vars.Add($Jitter);
    }

    if ($OverrideUserName){
        $vars.Add("--OverrideUserName")
        $vars.Add($OverrideUsername)
    }

    if ($NoRegistryLoggedOn){
        $vars.Add("--NoRegistryLoggedOn")
    }

    if ($DumpComputerStatus){
        $vars.Add("--DumpComputerStatus")
    }

    if ($RealDNSName){
        $vars.Add("--RealDNSName")
        $vars.Add($RealDNSName)
    }

    if ($CollectAllProperties){
        $vars.Add("--CollectAllProperties")
    }

    if ($StatusInterval){
        $vars.Add("--StatusInterval")
        $vars.Add($StatusInterval)
    }

    if ($V){
        $vars.Add("-v");
    }

    if ($Loop){
        $vars.Add("--Loop")
    }

    if ($LoopDuration){
        $vars.Add("--LoopDuration")
        $vars.Add($LoopDuration)
    }

    if ($LoopInterval){
        $vars.Add("--LoopInterval")
        $vars.Add($LoopInterval)
    }

    if ($Help){
        $vars.Add("--Help");
    }

    if ($Version){
        $vars.clear();
        $vars.Add("--Version");
    }

    $passed = [string[]]$vars.ToArray()
